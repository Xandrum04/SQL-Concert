C:\wamp64\bin\mysql\mysql8.3.0\bin\mysql.exe -u root -p --default-character-set=Greek

create table person(
PersonID int(11) not null auto_increment,
FirstName varchar(50) not null,
LastName varchar(80) not null,
Birthdate date not null,
Country varchar(50) not null,
Alias varchar(50),
isSoloArtist tinyint(4) not null,
ArtistID int(11) not null,
primary key(PersonID),
constraint isartist
foreign key(ArtistID) references artist(ArtistID)
on delete cascade on update cascade);


create table bandmember(
BandID int(11) not null,
PersonID int(11) not null,
FromDate date not null,
ToDate date,
primary key(BandID,PersonID),
unique(FromDate),
constraint ismember
foreign key(PersonID) references person(PersonID)
on delete cascade on update cascade,
constraint fromband
foreign key(BandID) references band(BandID)
on delete cascade on update cascade);


create table band(
BandID int(11) not null auto_increment,
BandName varchar(50) not null,
FormationDate date not null,
DisbandDate date,
ArtistID int(11) not null,
primary key(BandID),
constraint isartist
foreign key(ArtistID) references artist(ArtistID)
on delete cascade on update cascade);


create table genre(
GenreID int(11) not null auto_increment,
GenreName varchar(30) not null,
primary key(GenreID));


create table artist(
ArtistID int(11) not null auto_increment,
ArtistType enum('PERSON','BAND','ORCHESTRA','CHOIR','VIRTUAL','OTHER') not null,
primary key(ArtistID));


create table albumrelease(
ReleaseID int(11) not null auto_increment,
AlbumID int(11) not null,
ReleaseDate date not null,
ReleaseType enum('LP','CD','MP3') not null,
ReleaseStatus enum('OFFICIAL','PROMOTION','BOOTLEG','WITHDRAWN','CANCELED') not null,
Packaging enum ('BOOK','CARDBOARD SLEEVE','DIGIPAK','JEWEL CASE','NA') not null,
primary key(ReleaseID),
constraint isalbum
foreign key(AlbumID) references album(AlbumID)
on delete cascade on update cascade);



create table artistcompany(
ArtistID int(11) not null,
CompanyID int(11) not null,
FromDate date not null,
ToDate date,
primary key(ArtistID,CompanyID),
unique(FromDate),
constraint isartist
foreign key(ArtistID) references artist(ArtistID)
on delete cascade on update cascade,
constraint iscompany
foreign key(CompanyID) references recordcompany(CompanyID)
on delete cascade on update cascade);




create table recordcompany(
CompanyID int(11) not null auto_increment,
CompanyName varchar(80) not null,
Address varchar(150) not null,
Phone varchar(20) not null,
Email varchar(40) not null,
BeginDate date not null,
EndDate date,
primary key(CompanyID));


create table album(
AlbumID int(11) not null auto_increment,
Title varchar(100) not null,
ArtistID int(11) not null,
GenreID int(11) not null,
CompanyID int(11) not null,
ProducerID int(11) not null,
primary key(AlbumID),
unique(Title),
constraint fromartist
foreign key(ArtistID) references artist(ArtistID)
on delete cascade on update cascade,
constraint isgenre
foreign key(GenreID) references genre(GenreID)
on delete cascade on update cascade,
constraint isartist
foreign key(CompanyID) references recordcompany(CompanyID)
on delete cascade on update cascade,
constraint produced
foreign key(ProducerID) references producer(ProducerID)
on delete cascade on update cascade);


create table producercompany(
ProducerID int(11) not null,
RecordCompanyID int(11) not null,
FromDate date not null,
ToDate date,
primary key(ProducerID,RecordCompanyID),
unique(FromDate),
constraint isproducer
foreign key(ProducerID) references producer(ProducerID)
on delete cascade on update cascade,
constraint reccompany
foreign key(RecordCompanyID) references recordcompany(RecordCompanyID)
on delete cascade on update cascade);




create table producer(
ProducerID int(11) not null auto_increment,
FirstName varchar(50) not null,
LastName varchar(80) not null,
NumofProdAlbums int(11) not null,
primary key(ProducerID));



create table track(
TrackID int(11) not null auto_increment,
Title varchar(100) not null,
AlbumID int(11) not null,
TrackLength time not null,
TrackNo int(11) not null,
Lyrics text,
primary key(TrackID),
constraint fromalbum
foreign key(AlbumID) references album(AlbumID)
on delete cascade on update cascade);



insert into artist(ArtistType) values
('PERSON'),
('PERSON'),
('BAND'),
('CHOIR'),
('ORCHESTRA'),
('OTHER'),
('PERSON'),
('BAND'),
('BAND'),
('VIRTUAL');


insert into person(FirstName,LastName,BirthDate,Country,Alias,isSoloArtist,ArtistID) values
('James','Woods','1995-07-24','USA',null,1,1),
('Michael','Stevens','1980-11-05','Canada','Macklemore',1,2),
('Elizabeth','Owens','1983-04-14','UK',null,0,3),
('Howard','Nelson','1979-03-14','Mexico',null,0,3),
('David','Ackerland','1995-12-30','Belgium',null,1,7),
('Maria','Fockel','2000-09-28','France','Rosewalk',1,5),
('Anna','Larston','1959-03-31','Dennmark',null,0,8);

insert into recordcompany values
(null,'StarRecords','St. Birkins','424536546', 'starrrecords@gmail.com','1970-12-02',null),
(null,'PanikRecords','Vouliagmenis 77','2108943935','info@panikrecords.gr','2011-09-28',null),
(null,'Sony Music Entertainment','Mesogeion 311','2106722150','reception.enquiries@sonymusic.gr','1929-09-09',null),
(null,'SoundWave Records','123 Melody Lane','3105551234','info@soundwave.com','1995-06-15',null),
(null,'Harmony Studios','456 Rhythm Ave','6155555678','contact@harmonystudios.com','1987-03-10',null);

insert into producer values
(null,'Sophia', 'Taylor', 10),
(null,'Liam', 'Walker', 35),
(null,'Isabella', 'Clark', 16),
(null,'Ethan', 'Allen', 21),
(null,'Mia', 'Hernandez', 14),
(null,'Noah', 'White', 40);

insert into band values
(null,'Neon Horizon', '2012-05-14',null,3),
(null,'Twilight Rhythm', '1985-09-20',null,8),
(null,'Echoes of Eternity', '2007-02-28',null,9);

insert into bandmember values
(3,3,'2015-05-14',null),
(1,4,'2018-08-17',null),
(2,7,'2007-02-28',null),
(2,4,'1985-09-20',null);

insert into genre values
(null,'rock'),
(null,'jazz'),
(null,'pop'),
(null,'metal'),
(null,'rock'),
(null,'pop');


insert into artistcompany values
(1,1,"1990-04-23",null),
(2,1,"2000-03-14",null),
(3,3,"1999-11-30",null),
(7,4,"2010-08-10",null),
(8,5,"2015-12-01",null),
(9,2,"2016-03-09",null),
(1,4,"1998-12-08",null),
(2,3,"2022-01-23",null),
(7,2,"2004-07-17",null),
(8,4,"2017-04-18",null),
(9,5,"2019-02-20",null);

insert into producercompany values
(1,5,'1987-03-10',null),
(2,4,'1995-06-15',null),
(3,3,'1929-09-09',null),
(4,2,'2011-09-28',null),
(5,1,'1970-12-02',null),
(3,2,'1938-04-13',null),
(1,4,'2000-01-19',null),
(2,1,'2010-11-30',null);

insert into album values
(null,'Days Together',1,3,1,1),
(null,'Generations',2,5,4,2),
(null,'In the Sun',3,2,5,3),
(null,'Better Together',7,6,3,5),
(null,'Wanderlust Chronicles',8,1,4,3),
(null,'Over the Years',1,2,3,4),
(null,'This is us',8,6,2,6),
(null,'Smiling Ocean',9,6,1,2),
(null,'Teen Pain',1,1,2,4),
(null,'think about Promise',2,6,3,4);


insert into track values
(null,'All in Moon',1,'00:05:23',1,null),
(null,'The Unbeat',1,'00:05:20',2,null),
(null,'First Wave',1,'00:04:53',3,null),
(null,'Imagine Scars',1,'00:04:00',4,null),
(null,'Soft Horizon',1,'00:05:20',5,null), 
(null,'The Passion',1,'00:04:28',6,null),
(null,'Inspired Summer',1,'00:05:21',7,null),
(null,'Running Out of Time',1,'00:05:22',8,null),
(null,'Soul of Miles',2,'00:05:23',1,null),
(null,'Catle of Secrets',2,'00:04:03',2,null),
(null,'Cheery Lover',2,'00:05:40',3,null),
(null,'A Time of Today',2,'00:03:43',4,null),
(null,'Hot Touch',2,'00:04:50',5,null),
(null,'Sky of Blue',2,'00:05:32',6,null),
(null,'Foul Soul',2,'00:04:18',7,null),
(null,'Earning Break',2,'00:03:57',8,null),
(null,'Story of my Life',3,'00:05:15',1,null),
(null,'Dreamy Future',3,'00:03:50',2,null),
(null,'Break of Dawn',3,'00:04:13',3,null),
(null,'Hold the Line',3,'00:05:33',4,null),
(null,'Late Club',3,'00:02:59',5,null),
(null,'Stairway to Heaven',3,'00:04:10',6,null), 
(null,'Thank you',3,'00:03:57',7,null),
(null,'Tortured Soul',3,'00:05:27',8,null), 
(null,'Light Breeze',3,'00:03:45',9,null);                

    
insert into albumrelease values
(null,1,'2000-03-13','CD','OFFICIAL','BOOK'),
(null,2,'2005-01-23','MP3','PROMOTION','CARDBOARD SLEEVE'),
(null,3,'2013-07-30','LP','OFFICIAL','BOOK'),
(null,1,'2016-03-31','CD','PROMOTION','BOOK'),
(null,2,'1998-03-13','MP3','BOOTLEG','NA'),
(null,3,'1996-11-25','CD','WITHDRAWN','DIGIPACK'),
(null,1,'2004-07-17','LP','CANCELED','BOOK'),
(null,2,'1980-03-23','CD','OFFICIAL','BOOK'),
(null,3,'2014-05-13','MP3','OFFICIAL','NA'),
(null,1,'1997-02-25','LP','PROMOTION','CARDBOARD SLEEVE'),
(null,2,'2019-01-29','MP3','OFFICIAL','BOOK'),
(null,1,'2001-01-31','CD','BOOTLEG','NA');














3.1.2.1.


create table consert(
ConsertID int(11) not null auto_increment,
status Enum('Scheduled','Completed','Cancelled') default 'scheduled',
ConsertDate date,
ArtistID int(11) not null,
VenueID int(11) not null,
req_capacity int not null,
primary key(ConsertID),
constraint ArtisthasConcert
foreign key(ArtistID) references artist(ArtistID)
on delete cascade on update cascade,
constraint Takesplace
foreign key(VenueID) references venue(VenueID)
on delete cascade on update cascade
);

create table venue(
VenueID int(11) not null auto_increment,
IsFree Boolean not null,
Capacity int not null,
CompletedConserts int not null,
FromDate date,
primary key(VenueID)

);



✔
DROP TRIGGER IF EXISTS CheckConsertdata;  
DELIMITER $

CREATE TRIGGER CheckConsertdata BEFORE INSERT ON consert
FOR EACH ROW
BEGIN

    IF new.ConsertDate < DATE_ADD(CURDATE(), INTERVAL 5 DAY) THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Consert must be scheduled at least 5 days before the concert';
    END IF;

    IF (SELECT COUNT(*) FROM consert WHERE status = 'Scheduled' AND ArtistID = new.ArtistID) >= 3 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Artist can have at most 3 scheduled conserts';
    END IF;

END $

DELIMITER ;



✔
DROP TRIGGER IF EXISTS CheckCancellation; 
DELIMITER $

CREATE TRIGGER CheckCancellation BEFORE UPDATE ON consert
FOR EACH ROW
BEGIN

    IF (SELECT COUNT(*) FROM consert WHERE new.status = 'Scheduled' AND old.status = 'Cancelled' AND ArtistID = new.ArtistID) >= 3 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Artist can have at most 3 scheduled conserts';
    END IF;

    IF new.status = 'Cancelled' AND old.status = 'Scheduled' AND new.ConsertDate < DATE_ADD(CURDATE(), INTERVAL 3 DAY) THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Consert cannot be cancelled';
    END IF;

END $

DELIMITER ;









3.1.3.1 ✔

DROP PROCEDURE IF EXISTS getscore;
DELIMITER $

CREATE PROCEDURE getscore(IN venID INT, OUT res INT)
BEGIN

    DECLARE capacity INT;
    DECLARE compl INT;
    DECLARE years_active INT;

    SELECT venue.Capacity, venue.CompletedConserts, TIMESTAMPDIFF(YEAR, FromDate, CURDATE())
    INTO capacity, compl, years_active
    FROM venue
    WHERE VenueID = venID;

    SET res = ((capacity / 1000) * 1) + ((compl / 100) * 3) + (years_active * 2);

END $

DELIMITER ;









3.1.3.2  ✔

DROP PROCEDURE IF EXISTS PlanConsert;
DELIMITER $

CREATE PROCEDURE PlanConsert(IN artistID INT, IN Date DATE, IN choice CHAR)
BEGIN

    IF choice = 'i' THEN

        IF (SELECT COUNT(*) FROM consert WHERE status = 'Scheduled' AND consert.ArtistID = artistID) >= 1 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Artist already has scheduled consert';
        
        ELSEIF (SELECT COUNT(*) FROM consert WHERE status = 'Cancelled' AND consert.ArtistID = artistID) >= 1 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Artist already has cancelled consert';
        
        ELSE
            INSERT INTO consert(status, ConsertDate, ArtistID) VALUES ('Scheduled', Date, artistID);
            SELECT 'Consert scheduled' AS Message;
        END IF;



    ELSEIF choice = 'c' THEN

        IF (SELECT COUNT(*) FROM consert WHERE status = 'Scheduled' AND consert.ArtistID = artistID AND consertDate = Date) >= 1 THEN
            UPDATE consert SET status = 'Cancelled' WHERE status = 'Scheduled' AND consert.ArtistID = artistID AND consertDate = Date;
            SELECT 'Consert cancelled' AS Message;
        
        ELSEIF (SELECT COUNT(*) FROM consert WHERE status = 'Cancelled' AND consert.ArtistID = artistID AND consertDate = Date) >= 1 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Consert already cancelled';
        
        ELSE
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Scheduled consert does not exist';
        END IF;



    ELSEIF choice = 'a' THEN

        IF (SELECT COUNT(*) FROM consert WHERE status = 'Cancelled' AND consert.ArtistID = artistID AND consertDate = Date) >= 1 THEN
            UPDATE consert SET status = 'Scheduled' WHERE status = 'Cancelled' AND consert.ArtistID = artistID AND consertDate = Date;
            SELECT 'Cancelled Consert set to scheduled' AS Message;
        
        ELSEIF (SELECT COUNT(*) FROM consert WHERE status = 'Scheduled' AND consert.ArtistID = artistID AND consertDate = Date) >= 1 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Consert already scheduled';
        
        ELSE
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Cancelled consert does not exist';
        END IF;

    END IF;

END $

DELIMITER ;






3.1.3.3.


DROP PROCEDURE IF EXISTS GetVenueData;
DELIMITER $

CREATE PROCEDURE GetVenueData(IN conID INT, IN req_cap INT, OUT ven_id INT, OUT ven_cap INT)
BEGIN

    DECLARE venueExists INT;
    DECLARE highestScore INT DEFAULT 0;
    DECLARE bestVenID INT DEFAULT NULL;
    DECLARE bestVenCap INT DEFAULT 0;
    DECLARE venueScore INT;
    DECLARE ven_id_temp INT;
    DECLARE ven_cap_temp INT;

    DECLARE done INT DEFAULT 0;
    DECLARE foundVenues CURSOR FOR 
        SELECT venue.VenueID, venue.Capacity
        FROM venue
        WHERE venue.Capacity >= req_cap * 1.10 AND venue.IsFree = TRUE;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;


    IF (SELECT COUNT(*) FROM consert WHERE consert.ConsertID = conID AND consert.status = 'Cancelled') > 0 OR
       (SELECT COUNT(*) FROM consert WHERE consert.ConsertID = conID) < 1 THEN
        SET ven_id = NULL;
        SET ven_cap = 0;
    ELSE

        SELECT COUNT(*) INTO venueExists
        FROM consert
        WHERE consert.ConsertID = conID AND consert.VenueID IS NOT NULL AND consert.status != 'Cancelled';

        IF venueExists = 1 THEN

            SELECT venue.VenueID, venue.Capacity
            INTO ven_id, ven_cap
            FROM consert
            INNER JOIN venue ON consert.VenueID = venue.VenueID
            WHERE consert.ConsertID = conID;
        ELSE

            OPEN foundVenues;


            FETCH foundVenues INTO ven_id_temp, ven_cap_temp;


            WHILE done = 0 DO

                CALL getscore(ven_id_temp, venueScore);


                IF venueScore > highestScore THEN
                    SET highestScore = venueScore;
                    SET bestVenID = ven_id_temp;
                    SET bestVenCap = ven_cap_temp;
                END IF;

                FETCH foundVenues INTO ven_id_temp, ven_cap_temp;
            END WHILE;

            CLOSE foundVenues;

            SET ven_id = bestVenID;
            SET ven_cap = bestVenCap;
        END IF;
    END IF;


    SELECT ven_id AS Venue_ID, ven_cap AS Venue_Capacity;
END $
DELIMITER ;





3.1.3.4. 

CREATE TABLE ConcertHistory (
    concert_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    artist_name VARCHAR(255) NOT NULL,
    venue_name VARCHAR(255) NOT NULL,
    ticket_count INT NOT NULL,
    concert_date DATE NOT NULL
);


INSERT INTO ConcertHistory (artist_name, tickets_sold, venue_name, concert_date)
VALUES
('Artist A', 2000, 'Venue X', '2024-01-01'),
('Artist B', 3000, 'Venue Y', '2024-02-01'),
('Artist C', 2500, 'Venue X', '2024-03-01'),
('Artist D', 3500, 'Venue Z', '2024-04-01'),
('Artist E', 1500, 'Venue Y', '2024-05-01');



CREATE INDEX idx_tickets_count ON  ConcertHistory(ticket_count);


CREATE INDEX idx_venue_name ON  ConcertHistory(venue_name);


DELIMITER $
DROP PROCEDURE IF EXISTS GetArtistsByTicketRange;
CREATE PROCEDURE GetArtistsByTicketRange(IN min_tickets INT, IN max_tickets INT)
BEGIN
    SELECT DISTINCT artist_name
    FROM  ConcertHistory
    WHERE ticket_count BETWEEN min_tickets AND max_tickets;
END$

DELIMITER ;


//για να τρεξει το procedure και το index
SET profiling = 1;

CALL GetArtistsByTicketRange(2000, 3000);

SHOW PROFILE FOR QUERY 1;

SET profiling = 0;
//για να τρεξει το procedure και το index


DELIMITER $
DROP PROCEDURE IF EXISTS GetConcertDatesByVenue;
CREATE PROCEDURE GetConcertDatesByVenue(IN venue VARCHAR(255))
BEGIN
    SELECT concert_date
    FROM  ConcertHistory
    WHERE venue_name = venue;
END$

DELIMITER ;

//για να τρεξει το procedure και το index
SET profiling = 1;

CALL GetConcertDatesByVenue('Venue X');

SHOW PROFILE FOR QUERY 1;

SET profiling = 0;
//για να τρεξει το procedure και το index


3.1.2.3.
DELIMITER $

CREATE PROCEDURE PopulateConcertHistory()
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE i <= 60000 DO
        INSERT INTO ConcertHistory (artist_name, venue_name, ticket_count, concert_date)
        VALUES (
            CONCAT('Artist ', i % 100),           
            CONCAT('Venue ', i % 50),           
            FLOOR(1000 + RAND() * 9000),         
            DATE_ADD('2020-01-01', INTERVAL i DAY) 
        );
        SET i = i + 1;
    END WHILE;
END$

DELIMITER ;


3.1.2.4
CREATE TABLE DBA (
    DBA_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL
);


CREATE TABLE DBALog (
    log_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    DBA_ID INT NOT NULL,
    action_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    action_description VARCHAR(255),
    FOREIGN KEY (DBA_ID) REFERENCES DBA(DBA_ID)
);



DROP TRIGGER IF EXISTS LogDBAAction;  
DELIMITER $

CREATE TRIGGER LogDBAAction
AFTER INSERT ON DBA
FOR EACH ROW
BEGIN
    -- Καταγραφή της ενέργειας όταν προστίθεται νέος DBA
    INSERT INTO DBALog (DBA_ID, action_description) 
    VALUES (NEW.DBA_ID, CONCAT('DBA ', NEW.name, ' started on ', NEW.start_date));
END $

DELIMITER ;

 

DROP TRIGGER IF EXISTS LogDBAEndDate;  
DELIMITER $

CREATE TRIGGER LogDBAEndDate
AFTER UPDATE ON DBA
FOR EACH ROW
BEGIN
    IF OLD.end_date IS NULL AND NEW.end_date IS NOT NULL THEN
        -- Καταγραφή της αποχώρησης του DBA
        INSERT INTO DBALog (DBA_ID, action_description) 
        VALUES (NEW.DBA_ID, CONCAT('DBA ', NEW.name, ' left on ', NEW.end_date));
    END IF;
END $

DELIMITER ;


INSERT INTO DBA (name, start_date) VALUES 
('John Doe', '2023-01-01'),
('Jane Smith', '2023-03-15'),
('Alice Johnson', '2023-06-01');



